std::vector<string> split_paths(string &line)
{
	std::istringstream sline(line);
	std::vector<string> paths;
	string path;

	while (sline >> path)
		paths.push_back(path);

	return paths;
}

bool	is_defaults(std::string key)
{
	return (key == "listen" || key == "server_name" || key == "host" ||
			key == "root" || key == "client_max_body_size" || key == "index" || key == "error_page");
}

bool	is_location(std::string key)
{
	return (key == "allow_methods" || key == "index" 
	|| key == "autoindex" || key == "root" || key == "return");
}

void to_line_exp(string &line)
{
	line.erase(0, line.find_first_not_of(" \t\r"));
	line.erase(line.find_last_not_of(" \t\r") + 1);

	if (string::npos && line.find(';') != line.find_last_of(';'))
		line.insert(line.find(';') + 1, "\n");
	if (line.find_last_of("#") != string::npos)
		line.erase(line.find_last_of("#"));
	int j = 0;
	for (int i = 0; i < line.size(); i++)
	{
		if (!std::isspace(line[i]))
			j++;
		if ((line[i] == '}' || line[i] == '{' ) && line[i + 1] != '\n')
			line.push_back('\n');
	}
	if (j == 0)
		line.clear();
}


bool	check_syntax(token tok, string str)
{
	switch (tok)
	{
	case allow_methods_type:
	{
		std::istringstream ss(str);
		while (ss >> str)
		{
			if (!(str == "GET" || str == "POST" || str == "DELETE"))
				return false;
		}
		return true;
	} break;
	case return_type :
	{
		if (str.size() > PATH_MAX || str[0] != '/')
			return false;
		for (int i = 0; i < str.size(); i++)
			if (std::iscntrl(str[i]))
				return false;
		return true;
	} break;
	case root_type:
	{
		if (str.size() > PATH_MAX || str[0] != '/')
			return false;
		for (int i = 0; i < str.size(); i++)
			if (std::iscntrl(str[i]))
				return false;
		return true;
	} break;

	default:
		cout << "not yet\n";
		break;
	}
	return false;
}





void get_defaults(std::istringstream &exp, Config &conf, int &lock)
{
	std::string line;
	std::string	key;
	string		path;
	loc_details	loc = {0};


	while (std::getline(exp, line))
	{
		cout << line << endl;
		std::istringstream sline(line);

		sline >> key;
		if (is_defaults(key))
		{
			if (line.back() != ';')
				throw (std::runtime_error("syntax error near expected token `;'"));

			std::getline( sline , line );
			line.erase(line.find_last_not_of(";") + 1);
			conf.defaults[key] = line;
			key.clear();
			// sline.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
		}

		else if (key == "location")
		{
			cout << "location found" << endl;
			std::getline( sline , line );
			size_t pos = line.find_last_not_of(" \n\r\t") ;
			if (pos != string::npos)
			{
				if (line[pos] != '{')
					throw (std::runtime_error("syntax error near expected `{' after location path"));
				lock++;
				line.erase(line.find('{'));
			}
			std::vector<string> paths = split_paths( line );
			line.clear();

			while   (true)
			{
 				if (!std::getline( exp, line, '\n' ))
					throw (std::runtime_error("syntax error near expected `}' as location scop-end"));
			
				std::istringstream sline(line);

				sline >> std::skipws;
				sline >> key;
				if (is_location(key))
				{ 
					if (line.back() != ';')
						throw (std::runtime_error("Error: expected `;' end of expression"));

					std::getline( sline , line );
					std::istringstream sline(line);
					sline >> std::skipws;
					sline >> line;
					line.erase(line.find_last_not_of(";") + 1);
					location_params( loc, key, line );
					key.clear();
				}
				else if (key == "}")
				{
					lock--;
				}
				for (int i = 0; i < paths.size() ; i++)
					conf.location[paths[i]] = loc;
				}
			}
			else
				break;
	}

}